<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RedisTemplate常用方法</title>
    <link href="/2025/04/25/RedisTemplate%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2025/04/25/RedisTemplate%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Redis常用的数据类型："><a href="#一、Redis常用的数据类型：" class="headerlink" title="一、Redis常用的数据类型："></a>一、Redis常用的数据类型：</h2><ul><li>String</li><li>Hash</li><li>List</li><li>Set</li><li>zSet</li></ul><h2 id="二、RedisTemplate-常用-API"><a href="#二、RedisTemplate-常用-API" class="headerlink" title="二、RedisTemplate 常用 API"></a>二、RedisTemplate 常用 API</h2><h3 id="1-String-类型"><a href="#1-String-类型" class="headerlink" title="1. String 类型"></a>1. String 类型</h3><ol><li>判断是否有key所对应的值，有则返回true，没有则返回false；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.hasKey(key);<br></code></pre></td></tr></table></figure><ol start="2"><li>有则取出key值所对应的值；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue().get(key);<br></code></pre></td></tr></table></figure><ol start="3"><li>删除单个key值；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.delete(key);<br></code></pre></td></tr></table></figure><ol start="4"><li>批量删除key；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.delete(keys); <span class="hljs-comment">//其中keys:Collection&lt;K&gt; keys</span><br></code></pre></td></tr></table></figure><ol start="5"><li>将当前传入的key值序列化为byte[]类型；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.dump(key);<br></code></pre></td></tr></table></figure><ol start="6"><li>设置过期时间；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.expire(key, timeout, unit);<br> &#125;<br><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">expireAt</span><span class="hljs-params">(String key, Date date)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.expireAt(key, date);<br>  &#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>查找匹配的key值，返回一个Set集合类型（ * 代表查询所有）；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title function_">getPatternKey</span><span class="hljs-params">(String pattern)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.keys(pattern);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>修改Redis中key的名称；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renameKey</span><span class="hljs-params">(String oldKey, String newKey)</span> &#123;<br>    redisTemplate.rename(oldKey, newKey);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="9"><li>返回传入key所存储的值的类型；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> DataType <span class="hljs-title function_">getKeyType</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.type(key);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="10"><li>仅在newKey不存在时，将oldKey重命名为newKey，若newKey已存在，则放弃操作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renameIfAbsent</span><span class="hljs-params">(String oldKey, String newKey)</span>&#123;<br>    redisTemplate.renamIfAbsent(oldKey, newKey);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="11"><li>从Redis中随机取一个值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.randomKey();<br></code></pre></td></tr></table></figure><ol start="12"><li>返回当前key所对应的剩余过期时间</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getExpire</span><span class="hljs-params">(String key)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.getExpire(key);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="13"><li>返回当前key所对应的剩余过期时间并指定时间单位</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getExpire</span><span class="hljs-params">(String key, TimeUnit timeUnit)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.getExpire(key, timeUnit);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="14"><li>将key持久化保存</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">persistKey</span><span class="hljs-params">(String key)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.persist(key);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="15"><li>将当前Redis库中的key移动到指定的Redis库当中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">moveToDbIndex</span><span class="hljs-params">(String key, <span class="hljs-type">int</span> dbIndex)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.move(key, dbIndex);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="16"><li>设置当前的key以及value</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue().set(key, value);<br></code></pre></td></tr></table></figure><ol start="17"><li>设置当前的key以及value并设置过期时间</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redistemplaye.opsForValue().set(key, value, timeout, unit)<br></code></pre></td></tr></table></figure><ol start="18"><li>返回key中字符串的子字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCharacterRange</span><span class="hljs-params">(String key, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForValue().get(key, start, end)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="19"><li>获取旧值并设置新值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAndSet</span><span class="hljs-params">(String key, String value)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForValue().getAndSet(key, value);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="20"><li>批量获取</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">multiGet</span><span class="hljs-params">(Collection&lt;String&gt; keys)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForValue().multiGet(keys);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="21"><li>在原有的值基础上添加字符串到末尾</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue().append(key, value);<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始设置一个key</span><br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:1001:log&quot;</span>, <span class="hljs-string">&quot;Login at &quot;</span> + LocalDateTime.now());<br><br><span class="hljs-comment">// 追加日志内容</span><br><span class="hljs-type">int</span> <span class="hljs-variable">newLength</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().append(<span class="hljs-string">&quot;user:1001:log&quot;</span>, <span class="hljs-string">&quot;\nAction: Updated profile&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="22"><li>对存储在key中的数值（整数或浮点数）执行原子性递增操作，若key不存在，则初始化为0后再递增，increment增量（正数则自增，负数则自减）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">incr</span><span class="hljs-params">(String key)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, <span class="hljs-number">1L</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">incrby</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> increment)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, increment);<br>&#125;<br><br><span class="hljs-keyword">public</span> Double <span class="hljs-title function_">incrbyDouble</span><span class="hljs-params">(String key, <span class="hljs-type">double</span> increment)</span>&#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, increment);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="23"><li>原子性地设置键值对，<strong>仅当 key 不存在时</strong>才会执行设置操作。若 key 已存在，则放弃操作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue().setIfAbsent(key, value);<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 尝试原子性设置一个不存在的key</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isSet</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;user:1001:lock&quot;</span>, <span class="hljs-string">&quot;locked&quot;</span>);<br><br><span class="hljs-keyword">if</span> (isSet) &#123;<br>    System.out.println(<span class="hljs-string">&quot;分布式锁获取成功&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 执行业务逻辑</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 释放锁</span><br>        redisTemplate.delete(<span class="hljs-string">&quot;user:1001:lock&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;锁已被占用&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="24"><li>原子性地批量设置多个键值对，<strong>仅当所有指定的 key 都不存在时才会执行设置</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue().multiSetIfAbsent(valueMap);<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; defaultConfigs = Map.of(<br>    <span class="hljs-string">&quot;sys:timeout&quot;</span>, <span class="hljs-string">&quot;5000&quot;</span>,<br>    <span class="hljs-string">&quot;sys:max_conn&quot;</span>, <span class="hljs-string">&quot;1000&quot;</span><br>);<br><br><span class="hljs-comment">// 原子性批量设置（仅当所有key不存在时）</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isSet</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().multiSetIfAbsent(valueMap);<br><br><span class="hljs-keyword">if</span> (isSet) &#123;<br>    System.out.println(<span class="hljs-string">&quot;所有配置项初始化成功&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;部分配置项已存在，未执行设置&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="25"><li>获取字符串的长度</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue().size(key);<br></code></pre></td></tr></table></figure><ol start="26"><li>从指定 <code>offset</code> 位置开始，<strong>覆盖写入</strong> Redis 字符串类型 key 的部分内容（类似字符串的 <code>substring</code> 替换）。<strong>偏移量从0开始计算</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue().set(key, value, offset);<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始化一个字符串</span><br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;Hello, world!&quot;</span>);<br><br><span class="hljs-comment">// 从偏移量7开始覆盖写入（注意：偏移量从0开始计算）</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">newLength</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().set(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;Redis&quot;</span>, <span class="hljs-number">7</span>);<br><br>System.out.println(<span class="hljs-string">&quot;修改后的字符串: &quot;</span> + redisTemplate.opsForValue().get(<span class="hljs-string">&quot;message&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;新长度: &quot;</span> + newLength);<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">修改后的字符串: Hello, Redis!<br>新长度: 12<br></code></pre></td></tr></table></figure><ol start="27"><li>将二进制第offset位值变为value</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue().setBit(key, offset, value);<br></code></pre></td></tr></table></figure><ol start="28"><li>对key所储存的字符串值，获取指定偏移量上的位(bit)；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue().getBit(key, offset);<br></code></pre></td></tr></table></figure><h3 id="2-Hash-类型"><a href="#2-Hash-类型" class="headerlink" title="2. Hash 类型"></a>2. Hash 类型</h3><ol><li>获取变量中的指定map键是否有值,如果存在该map键则获取值，没有则返回null</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForHash().get(key, field);<br></code></pre></td></tr></table></figure><ol start="2"><li>获取变量中的键值对</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title function_">hGetAll</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>新增hashMap值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForHash().put(key, hashKey, value);<br></code></pre></td></tr></table></figure><ol start="4"><li>以map集合的形式添加键值对</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hPutAll</span><span class="hljs-params">(String key, Map&lt;String, String&gt; maps)</span> &#123;<br>    redisTemplate.opsForHash().putAll(key, maps);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>仅当hashKey不存在时才设置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">hashPutIfAbsent</span><span class="hljs-params">(String key, String hashKey, String value)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().putIfAbsent(key, hashKey, value);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>删除一个或者多个hash表字段</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">hashDelete</span><span class="hljs-params">(String key, Object... fields)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().delete(key, fields);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>查看hash表中指定字段是否存在</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hashExists</span><span class="hljs-params">(String key, String field)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(key, field);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>给哈希表key中的指定字段的整数值加上增量increment</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">hashIncrBy</span><span class="hljs-params">(String key, Object field, <span class="hljs-type">long</span> increment)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, field, increment);<br>&#125;<br><br><span class="hljs-keyword">public</span> Double <span class="hljs-title function_">hIncrByDouble</span><span class="hljs-params">(String key, Object field, <span class="hljs-type">double</span> delta)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, field, delta);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="9"><li>获取所有hash表中字段</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForHash().keys(key);<br></code></pre></td></tr></table></figure><ol start="10"><li>获取hash表中字段的数量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForHash().size(key);<br></code></pre></td></tr></table></figure><ol start="11"><li>获取hash表中存在的所有的值；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">hValues</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().values(key);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="12"><li>匹配获取键值对，ScanOptions.NONE为获取全部键对；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Cursor&lt;Entry&lt;Object, Object&gt;&gt; <span class="hljs-title function_">hashScan</span><span class="hljs-params">(String key, ScanOptions options)</span> &#123;<br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().scan(key, options);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-List类型"><a href="#3-List类型" class="headerlink" title="3. List类型"></a>3. List类型</h3><ol><li>通过索引获取列表中的元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().index(key, index);<br></code></pre></td></tr></table></figure><ol start="2"><li>获取列表指定范围内的元素(start开始位置, 0是开始位置，end 结束位置, -1返回所有)；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().range(key, start, end);<br></code></pre></td></tr></table></figure><ol start="3"><li>存储在list的头部，即添加一个就把它放在最前面的索引处</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().leftPush(key, value);<br></code></pre></td></tr></table></figure><ol start="4"><li>把多个值存入List中(value可以是多个值，也可以是一个Collection value)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().leftPushAll(key, value);<br></code></pre></td></tr></table></figure><ol start="5"><li>List存在的时候再加入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().leftPushIfPresent(key, value);<br></code></pre></td></tr></table></figure><ol start="6"><li>如果pivot处值存在则在pivot前面添加</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().leftPush(key, pivot, value);<br></code></pre></td></tr></table></figure><ol start="7"><li>按照先进先出的顺序来添加(value可以是多个值，或者是Collection var2)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().rightPush(key, value);<br><br>redisTemplate.opsForList().rightPushAll(key, value);<br></code></pre></td></tr></table></figure><ol start="8"><li>在pivot元素的右边添加值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().rightPush(key, pivot, value);<br></code></pre></td></tr></table></figure><ol start="9"><li>设置指定索引处元素的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().set(key, index, value);<br></code></pre></td></tr></table></figure><ol start="10"><li>移除并获取列表中第一个元素(如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().leftPop(key);<br><br>redisTemplate.opsForList().leftPop(key, timeout, unit);<br></code></pre></td></tr></table></figure><ol start="11"><li>移除并获取列表最后一个元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().rightPop(key);<br><br>redisTemplate.opsForList().rightPop(key, timeout, unit);<br></code></pre></td></tr></table></figure><ol start="12"><li>从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey);<br><br>redisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey, timeout, unit);<br></code></pre></td></tr></table></figure><ol start="13"><li>删除集合中值等于value的元素(index&#x3D;0, 删除所有值等于value的元素; index&gt;0, 从头部开始删除第一个值等于value的元素; index&lt;0, 从尾部开始删除第一个值等于value的元素)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().remove(key, index, value);<br></code></pre></td></tr></table></figure><ol start="14"><li>将List列表进行剪裁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().trim(key, start, end);<br></code></pre></td></tr></table></figure><ol start="15"><li>获取当前key的List列表长度</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForList().size(key);<br></code></pre></td></tr></table></figure><h3 id="4-Set类型"><a href="#4-Set类型" class="headerlink" title="4. Set类型"></a>4. Set类型</h3><ol><li>添加元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().add(key, values);<br></code></pre></td></tr></table></figure><ol start="2"><li>移除元素(单个值、多个值)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().remove(key, values);<br></code></pre></td></tr></table></figure><ol start="3"><li>删除并且返回一个随机的元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().pop(key);<br></code></pre></td></tr></table></figure><ol start="4"><li>获取集合的大小</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().size(key);<br></code></pre></td></tr></table></figure><ol start="5"><li>判断集合是否包含value</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().isMember(key, value);<br></code></pre></td></tr></table></figure><ol start="6"><li>获取两个集合的交集(key对应的无序集合与otherKey对应的无序集合求交集)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().intersect(key, otherKey);<br></code></pre></td></tr></table></figure><ol start="7"><li>获取多个集合的交集(Collection var2)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().intersect(key, otherKeys);<br></code></pre></td></tr></table></figure><ol start="8"><li>key集合与otherKey集合的交集存储到destKey集合中(其中otherKey可以为单个值或者集合)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().intersectAndStore(key, otherKey, destKey);<br></code></pre></td></tr></table></figure><ol start="9"><li>key集合与多个集合的交集存储到destKey无序集合中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().intersectAndStore(key, otherKeys, destKey);<br></code></pre></td></tr></table></figure><ol start="10"><li>获取两个或者多个集合的并集(otherKeys可以为单个值或者是集合)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().union(key, otherKeys);<br></code></pre></td></tr></table></figure><ol start="11"><li>key集合与otherKey集合的并集存储到destKey中(otherKeys可以为单个值或者是集合)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().unionAndStore(key, otherKey, destKey);<br></code></pre></td></tr></table></figure><p>12.获取两个或者多个集合的差集(otherKeys可以为单个值或者是集合)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().difference(key, otherKeys);<br><br></code></pre></td></tr></table></figure><ol start="13"><li>差集存储到destKey中(otherKeys可以为单个值或者集合)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().differenceAndStore(key, otherKey, destKey)<br></code></pre></td></tr></table></figure><ol start="14"><li>随机获取集合中的一个元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().randomMember(key);<br></code></pre></td></tr></table></figure><ol start="15"><li>获取集合中的所有元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().members(key);<br></code></pre></td></tr></table></figure><ol start="16"><li>随机获取集合中count个元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().randomMembers(key, count);<br></code></pre></td></tr></table></figure><ol start="17"><li>获取多个key无序集合中的元素（去重），count表示个数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().distinctRandomMembers(key, count);<br></code></pre></td></tr></table></figure><ol start="18"><li>遍历set类似于Interator(ScanOptions.NONE为显示所有的)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForSet().scan(key, options);<br></code></pre></td></tr></table></figure><h3 id="5-zSet类型"><a href="#5-zSet类型" class="headerlink" title="5. zSet类型"></a>5. zSet类型</h3><ol><li>ZSetOperations提供了一系列方法对有序集合进行操作，添加元素(有序集合是按照元素的score值由小到大进行排列)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().add(key, value, score);<br></code></pre></td></tr></table></figure><ol start="2"><li>删除对应的value,value可以为多个值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().remove(key, values);<br></code></pre></td></tr></table></figure><ol start="3"><li>增加元素的score值，并返回增加后的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().incrementScore(key, value, delta);<br></code></pre></td></tr></table></figure><ol start="4"><li>返回元素在集合的排名,有序集合是按照元素的score值由小到大排列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().rank(key, value);<br></code></pre></td></tr></table></figure><ol start="5"><li>返回元素在集合的排名,按元素的score值由大到小排列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().reverseRank(key, value);<br></code></pre></td></tr></table></figure><ol start="6"><li>获取集合中给定区间的元素(start 开始位置，end 结束位置, -1查询所有)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().reverseRangeWithScores(key, start,end);<br></code></pre></td></tr></table></figure><ol start="8"><li>按照分数范围升序输出名称</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rangebyscore key min max [withscores]<br></code></pre></td></tr></table></figure><ol start="9"><li>根据分数范围删除元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">zremrangebyscore key min max [withscores]<br></code></pre></td></tr></table></figure><ol start="10"><li>按照分数范围降序输出名称</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);<br><br>redisTemplate.opsForZSet().reverseRangeByScoreWithScores(key, min, max);<br><span class="hljs-comment">//返回值为:Set&lt;ZSetOperations.TypedTuple&lt;V&gt;&gt;</span><br></code></pre></td></tr></table></figure><ol start="11"><li>从高到低的排序集中获取分数在最小和最大值之间的元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().reverseRangeByScore(key, min, max, start, end);<br></code></pre></td></tr></table></figure><ol start="12"><li>根据score值获取集合元素数量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().count(key, min, max);<br></code></pre></td></tr></table></figure><ol start="13"><li>获取集合的大小</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().size(key);<br><br>redisTemplate.opsForZSet().zCard(key);<br></code></pre></td></tr></table></figure><ol start="14"><li>获取集合中key、value元素对应的score值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().score(key, value);<br></code></pre></td></tr></table></figure><ol start="15"><li>移除指定索引位置处的成员</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().removeRange(key, start, end);<br></code></pre></td></tr></table></figure><ol start="16"><li>移除指定score范围的集合成员</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().removeRangeByScore(key, min, max);<br></code></pre></td></tr></table></figure><ol start="17"><li>获取key和otherKey的并集并存储在destKey中（其中otherKeys可以为单个字符串或者字符串集合）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey);<br></code></pre></td></tr></table></figure><ol start="18"><li>获取key和otherKey的交集并存储在destKey中（其中otherKeys可以为单个字符串或者字符串集合）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForZSet().intersectAndStore(key, otherKey, destKey);<br></code></pre></td></tr></table></figure><ol start="19"><li>遍历集合（和iterator一模一样）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Cursor&lt;TypedTuple&lt;Object&gt;&gt; scan = opsForZSet.scan(<span class="hljs-string">&quot;test3&quot;</span>, ScanOptions.NONE);<br><span class="hljs-keyword">while</span> (scan.hasNext())&#123;<br>     ZSetOperations.TypedTuple&lt;Object&gt; item = scan.next();<br>     System.out.println(item.getValue() + <span class="hljs-string">&quot;:&quot;</span> + item.getScore());<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>RedisTemplate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 博客搭建和使用教程(Windows)</title>
    <link href="/2025/04/16/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/"/>
    <url>/2025/04/16/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/</url>
    
    <content type="html"><![CDATA[<p><strong>写在前面</strong></p><p>本文旨在使用 Hexo 博客框架搭建并部署到<a href="https://github.com/">GitHub</a>，免费搭建一个属于自己的博客网站。</p><hr><p>Hexo 介绍：</p><blockquote><p><strong>Hexo</strong> 是一个快速、简洁且高效的静态博客框架，基于 <strong>Node.js</strong> 开发。它使用 <strong>Markdown</strong> 编写文章，并生成静态 HTML 文件，可以轻松部署到 <strong>GitHub Pages</strong>、<strong>Vercel</strong>、<strong>Netlify</strong> 等平台。</p></blockquote><p>Hexo 官方中文网站：<a href="https://hexo.io/zh-cn/">Hexo</a></p><h2 id="第一章-前期准备"><a href="#第一章-前期准备" class="headerlink" title="第一章 前期准备"></a>第一章 前期准备</h2><h3 id="1-1-安装前所需环境"><a href="#1-1-安装前所需环境" class="headerlink" title="1.1 安装前所需环境"></a>1.1 安装前所需环境</h3><p>安装 Hexo 之前，需要确保您的PC中已经安装以下工具：</p><ul><li>Node.js [<a href="https://nodejs.org/zh-cn">Node.js 官方网站</a>]</li><li>Git [<a href="git-scm.com">Git官方网站</a>]</li></ul><p>如果您的电脑已经具备所需工具，那么您可以直接进入第二章开始安装 Hexo 了。</p><p>如果您还未安装这两款工具，可以点击以下教程链接进行安装，也可以自行搜索教程进行安装。</p><ul><li><a href="https://blog.csdn.net/WHF__/article/details/129362462">Node.js安装教程</a></li><li><a href="https://blog.csdn.net/mukes/article/details/115693833">Git安装教程</a></li></ul><p>当您完成安装 Hexo 所需的环境之后，就可以开始安装 Hexo 了</p><h2 id="第二章-安装-Hexo"><a href="#第二章-安装-Hexo" class="headerlink" title="第二章 安装 Hexo"></a>第二章 安装 Hexo</h2><h3 id="2-1-安装-Hexo"><a href="#2-1-安装-Hexo" class="headerlink" title="2.1 安装 Hexo"></a>2.1 安装 Hexo</h3><ul><li><p>命令：<code>npm install -g hexo-cli </code></p><p>说明：-g 表示全局安装，hexo-cli 为所安装的包</p></li><li><p>安装后验证：在 cmd 中输入命令<code>hexo -v</code>，可查看 Hexo 版本</p></li></ul><p><img src="/../images/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/%E6%9F%A5%E7%9C%8BHexo%E7%89%88%E6%9C%AC.png" alt="查看 Hexo 版本"></p><h3 id="2-2-Node-js-版本限制"><a href="#2-2-Node-js-版本限制" class="headerlink" title="2.2 Node.js 版本限制"></a>2.2 Node.js 版本限制</h3><p>如果你坚持使用旧的 Node.js，你可以考虑安装 Hexo 的过去版本。</p><p>请注意，我们不提供对过去版本 Hexo 的错误修复。</p><p>我们强烈建议永远安装 <a href="https://www.npmjs.com/package/hexo?activeTab=versions">最新版本</a> 的 Hexo，以及 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js 版本</a>。</p><table><thead><tr><th align="left">Hexo 版本</th><th align="left">最低版本 (Node.js 版本)</th><th align="left">最高版本 (Node.js 版本)</th></tr></thead><tbody><tr><td align="left">7.0+</td><td align="left">14.0.0</td><td align="left">latest</td></tr><tr><td align="left">6.2+</td><td align="left">12.13.0</td><td align="left">latest</td></tr><tr><td align="left">6.0+</td><td align="left">12.13.0</td><td align="left">18.5.0</td></tr><tr><td align="left">5.0+</td><td align="left">10.13.0</td><td align="left">12.0.0</td></tr><tr><td align="left">4.1 - 4.2</td><td align="left">8.10</td><td align="left">10.0.0</td></tr><tr><td align="left">4.0</td><td align="left">8.6</td><td align="left">8.10.0</td></tr><tr><td align="left">3.3 - 3.9</td><td align="left">6.9</td><td align="left">8.0.0</td></tr><tr><td align="left">3.2 - 3.3</td><td align="left">0.12</td><td align="left">未知</td></tr><tr><td align="left">3.0 - 3.1</td><td align="left">0.10 或 iojs</td><td align="left">未知</td></tr><tr><td align="left">0.0.1 - 2.8</td><td align="left">0.10</td><td align="left">未知</td></tr></tbody></table><ul><li>注意事项:<br>注册的邮箱一定要验证，否则不会成功;<br>仓库名字必须是：<a href="http://username.github.io,其中/">http://username.github.io，其中</a> username 是你的用户名;<br>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久</li></ul><h2 id="第三章-配置-GitHub"><a href="#第三章-配置-GitHub" class="headerlink" title="第三章 配置 GitHub"></a>第三章 配置 GitHub</h2><p>如果你还没有 GitHub 账户，需要注册一个 GitHub 账户。</p><h3 id="3-1-在-GitHub-上创建仓库"><a href="#3-1-在-GitHub-上创建仓库" class="headerlink" title="3.1 在 GitHub 上创建仓库"></a>3.1 在 GitHub 上创建仓库</h3><ul><li>新建一个名为: <a href="http://username.github.io/">http://username.github.io</a> 的仓库(username 为您的 Github 用户名)</li><li>比如，如果您的 github 用户名是 test，那么您就新建名为 <a href="http://test.github.io/">http://test.github.io</a> 的仓库（必须是您的用户名，其它名称无效），将来你的网站访问地址就是 <a href="https://test.github.io/">https://test.github.io</a> 了。由此可见，每一个 github 账户最多只能创建一个这样可以直接使用域名访问的仓库。</li></ul><p><img src="/../images/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="创建仓库"></p><ul><li>注意事项:<br>注册的邮箱一定要验证，否则不会成功;<br>仓库名字必须是：<a href="http://username.github.io,其中/">http://username.github.io，其中</a> username 是你的用户名;<br>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久</li></ul><h3 id="3-2-配置-SSH-免密登录"><a href="#3-2-配置-SSH-免密登录" class="headerlink" title="3.2 配置 SSH 免密登录"></a>3.2 配置 SSH 免密登录</h3><p>为什么要配置这个呢？因为您提交代码肯定要拥有您的 GitHub 权限才可以，但是直接使用用户名和密码不太安全，所以我们使用 ssh key 来解决本地和服务器的连接问题。</p><p><strong>注:</strong> 如果您已经配置过 SSH，可跳过此步骤</p><h4 id="生成-SSH-密钥"><a href="#生成-SSH-密钥" class="headerlink" title="生成 SSH 密钥"></a><strong>生成 SSH 密钥</strong></h4><p>输入以下命令来生成 SSH 密钥，将示例中使用的电子邮件替换为 GitHub 电子邮件地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>遇到提示信息可以一路回车。</p><p>现在你已经生成了 SSH 密钥对，你可以在C:\Users\您的用户名\ .ssh文件夹，打开这个文件夹，找到 .ssh\id_ed25519.pub 文件，记事本打开并复制里面的内容</p><h4 id="将-SSH-密钥添加到-Github"><a href="#将-SSH-密钥添加到-Github" class="headerlink" title="将 SSH 密钥添加到 Github"></a>将 SSH 密钥添加到 Github</h4><p>浏览器打开 Github，点击个人头像 –&gt; 点击 <code>Settings</code> –&gt; 点击左边导航栏的 <code>SSH and GPG keys</code> –&gt; 点击靠近右上角的 <code>New SSH key</code>。</p><p><code>Key type</code> 选择 <code>Authentication Key</code>，随便起一个 Tittle，复制你刚刚生成的 <code>id_ed25519.pub</code> 内容到 <code>Key</code> 中，点击 <code>Add SSH key</code> 保存。</p><p><img src="/../images/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/AddSSHKey.png" alt="将 SSH 密钥添加到 Github"></p><h4 id="检测是否设置成功"><a href="#检测是否设置成功" class="headerlink" title="检测是否设置成功:"></a>检测是否设置成功:</h4><p>输入命令: <code>ssh -T git@github.com</code></p><p><img src="/../images/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/%E6%A3%80%E6%B5%8BSSH%E8%AE%BE%E7%BD%AE%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F.png" alt="检测 SSH 设置是否成功"></p><p>看到以上信息说明 SSH 已配置成功!</p><h4 id="设置您的用户名和邮箱"><a href="#设置您的用户名和邮箱" class="headerlink" title="设置您的用户名和邮箱"></a>设置您的用户名和邮箱</h4><p><strong>输入以下命令设置用户名和邮箱</strong></p><p>命令: <code>git config --global user.name &quot;您的 Github username&quot;</code> [^注意是 username, 而非昵称]</p><p>命令: <code>git config --global user.email &quot;xxx@qq.com&quot;</code>  [^填写您的 github 注册邮箱]</p><p><strong>输入以下命令查看设置的用户名和邮箱</strong></p><p>输入<code>git config --global user.name</code>可以查看自己设置的用户名</p><p>输入<code>git config --global user.email</code>可以查看自己设置的邮箱</p><p>至此，您已经成功配置好了 GitHub，接下来开始搭建个人博客吧！</p><h2 id="第四章-使用-Hexo-搭建博客"><a href="#第四章-使用-Hexo-搭建博客" class="headerlink" title="第四章 使用 Hexo 搭建博客"></a>第四章 使用 Hexo 搭建博客</h2><h3 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h3><ol><li>在电脑的某个磁盘或路径新建一个名为 Hexo的文件夹(名字可以随便取)，比如我的是 D:\Code\Hexo，由于这个文件夹将来就作为您存放代码的地方，所以最好不要随便放。</li><li>在您创建的文件夹下右键打开 Git Bash Here，输入命令: <code>hexo init</code> 进行初始化</li></ol><p><img src="/../images/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/%E5%88%9D%E5%A7%8B%E5%8C%96Hexo.png" alt="初始化 Hexo"></p><ul><li>hexo 会自动下载一些文件到这个目录，目录结构如下图:</li></ul><p><img src="/../images/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-Windows/Hexo%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="Hexo 目录结构"></p><ol start="3"><li>执行命令: <code>hexo g</code> 会在 public 文件夹下生成相关的 html 文件。</li><li>执行命令: <code>hexo s</code> 可以开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到博客内容</li></ol><h3 id="4-2-将博客部署到-GitHub"><a href="#4-2-将博客部署到-GitHub" class="headerlink" title="4.2 将博客部署到 GitHub"></a>4.2 <strong>将博客部署到 GitHub</strong></h3><ol><li>在 Hexo 根目录下安装 hexo-deployer-git 插件</li></ol><ul><li>命令: <code>npm install hexo-deployer-git --save</code></li></ul><ol start="2"><li>编辑 Hexo  根目录下的 _config.yml 文件，在文件末尾添加如下内容:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><ul><li>注意：repository就是上面创建的仓库地址，username为你自己的GitHub用户名。</li></ul><ol start="3"><li>在 Hexo 根目录下，输入命令: <code>hexo d</code> 将本地 blog 推送到 github 远程仓库。</li></ol><p>推送成功后，即可通过 <a href="https://username.github.io/">https://username.github.io/</a>  访问个人博客了！</p><hr><p>参考教程:</p><p><a href="https://zhuanlan.zhihu.com/p/547520780">2022 Hexo 博客搭建和使用教程(Windows)</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/16/hello-world/"/>
    <url>/2025/04/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
